{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Scarf Documentation Scarf offers a set of tools to help you better understand how your open-source software (OSS) is being used, make data-informed decisions about your work, and connect with your commercial users to financially support your project or business. This site documents the various components of Scarf's toolchain for maintainers. You can contribute to the docs directly, they are hosted on GitHub . Want to meet the people the people of Scarf\u2014staff, open source maintainers, end-users and learn more about our products and plans? Join the Scarf-Community workspace on Slack . We'll keep an eye out for your questions and concerns. To see Scarf's uptime and system status, you can view the status page here .","title":"Introduction"},{"location":"#scarf-documentation","text":"Scarf offers a set of tools to help you better understand how your open-source software (OSS) is being used, make data-informed decisions about your work, and connect with your commercial users to financially support your project or business. This site documents the various components of Scarf's toolchain for maintainers. You can contribute to the docs directly, they are hosted on GitHub . Want to meet the people the people of Scarf\u2014staff, open source maintainers, end-users and learn more about our products and plans? Join the Scarf-Community workspace on Slack . We'll keep an eye out for your questions and concerns. To see Scarf's uptime and system status, you can view the status page here .","title":"Scarf Documentation"},{"location":"api/","text":"Scarf offers API access to the maintainer toolchain, rooted at https://scarf.sh/api . Authentication All Scarf accounts come with an API token, found on the user details page . To authenticate your requests, add an Authorization header in the form: Authorization: Bearer <token> Organizations This section describes the available API endpoints for managing organizations on Scarf. Get organization GET https://scarf.sh/api/v1/organizations/{organization-name} Gets the organization with the name organization-name . Returns a JSON -encoded OrganizationV1 Create organization POST https://scarf.sh/api/v1/organizations Create a new organization. The issuer of the request is made owner of the newly created organization. Expects a JSON -encoded OrganizationUpsertV1 in the request body. Update organization PUT https://scarf.sh/api/v1/organizations/{organization-name} Updates organization with name organization-name . Expects a JSON -encoded OrganizationUpsertV1 in the request body. List packages GET https://scarf.sh/api/v1/organizations/{organization-name}/packages List all packages for the organization with name organization-name . Returns a JSON -encoded list of PackageV1 Create package POST https://scarf.sh/api/v1/organizations/{organization-name}/packages Create a new package under the organization with name organization-name . Expects a JSON -encoded PackageUpsertV1 in the request body. List users GET https://scarf.sh/api/v1/organizations/{organization-name}/users List all members of the organization with name organization-name . Returns a JSON -encoded list of OrganizationMemberV1 . Upsert organization membership POST https://scarf.sh/api/v1/organizations/{organization-name}/users Creates or updates a membership for the organization with name organization-name . Expects a JSON -encoded OrganizationMemberUpsertV1 in the request body. Remove organization member DELETE https://scarf.sh/api/v1/organizations/{organization-name}/users/{username} Removes the member username from the organization with name organization-name . OrganizationV1 Field Description Optional name Organization name No description Description of the organization. No website The organization website Yes billingEmail Email addres to use for billing No createdAt When the organization was created No updatedAt When the organization was last updated No OrganizationUpsertV1 Field Description Optional name Organization name No description Description of the organization. No website The organization website Yes billingEmail Email addres to use for billing No OrganizationMemberV1 Field Description Optional organizationName Organization name No username The member's username No role The member's role (member, admin, owner) No OrganizationMemberUpsertV1 Field Description Optional username The member's username No role The member's role (member, admin, owner) No Packages (All Package Types) This section describes API endpoints for management of any type of file entry on Scarf. List packages GET https://scarf.sh/api/v1/packages List all packages for the user. Returns a JSON -encoded list of PackageV1 Get package GET https://scarf.sh/api/v1/packages/{package-id} Gets a package with UUID package-id . You can also get the package by specifying the package name e.g. GET https://scarf.sh/api/v1/packages/{package-name} In case you have different packages with the same name, you can use the packageType query parameter to disambiguate e.g. GET https://scarf.sh/api/v1/packages/{package-name}?packageType=docker Returns a JSON -encoded PackageV1 Create package POST https://scarf.sh/api/v1/packages Create a new package. Expects a JSON -encoded PackageUpsertV1 in the request body. Update package PUT https://scarf.sh/api/v1/packages/{package-id} Updates package with UUID package-id . Expects a JSON -encoded PackageUpsertV1 in the request body. Note that libraryType can't be changed after package creation. Delete package DELETE https://scarf.sh/api/v1/packages/{package-id} Deletes package with UUID package-id . Get package permissions GET https://scarf.sh/api/v1/packages/{package-id}/permissions Returns a JSON -encoded list of PackagePermissionGetV1 . Set package permissions POST https://scarf.sh/api/v1/packages/{package-id}/permissions Modifies permissions for the package based on a single or an array of JSON -encoded PackagePermissionSetV1 in the request body. PackageV1 Field Description Optional uuid The package's identifier No owner The account name of the package owner No name The name of the package No shortDescription A short description of the package No createdAt When the package was created No longDescription A longer description of the package Yes website The package website Yes libraryType The type of the package (docker, npm, hackage, pypi, other) Yes PackageUpsertV1 Field Description Optional name The name of the package No shortDescription A short description of the package No longDescription A longer description of the package Yes website The package website Yes libraryType The type of the package (docker, npm, hackage, pypi, other) Yes backendUrl The backend URL for the docker registry (docker only). Must be a valid URL with at least 1 path component with each path component matching [a-z0-9]+(?:[._-][a-z0-9]+)* Yes publicUrl The public URL for the docker registry (docker only). Must be a valid URL matching backendUrl 's path parts Yes PackagePermissionGetV1 Field Description Optional username Username of the user to which permissionLevel is assigned No permissionLevel The PackagePermissionLevelV1 the user has assigned No PackagePermissionSetV1 Field Description Optional userQuery A query to look up the user whose permissions we want to set (email or username) No permissionLevel The PackagePermissionLevelV1 to give the user No PackagePermissionLevelV1 Enum value Description blocked The user is blocked from the package default The user has the default access level member The user is a member of the package but cannot administer it admin The user is an admin of the package File Packages File packages on Scarf represent artifacts of any kind of file. Configuration of file packages offer more granular, lower-level controls than other packages types. Path routing is user-defined, rather than the API standards of a given package/container registry. List package routes GET https://scarf.sh/api/v1/packages/{package-id}/routes List all package routes for the user. Returns a JSON -encoded list of PackageRouteV1 Create package route POST https://scarf.sh/api/v1/packages/{package-id}/routes Create a new package route. Expects a JSON -encoded CreatePackageRouteV1 in the request body. Delete package route DELETE https://scarf.sh/api/v1/packages/{package-id}/routes/{route-id} Delete a package route. List package domains GET https://scarf.sh/api/v1/packages/{package-id}/domains List all package domains for the user. Returns a JSON -encoded list of PackageDomainV1 Create package domain POST https://scarf.sh/api/v1/packages/{package-id}/domains Create a new package domain. Expects a JSON -encoded CreatePackageDomainV1 in the request body. Delete package domains DELETE https://scarf.sh/api/v1/packages/{package-id}/domains/{domain-id} Deletes a package domain. PackageRouteV1 Field Description id The id of the package route outgoingUrl The outgoing url for the route templatePath The template path of the route CreatePackageRouteV1 Field Description Optional outgoingUrl The outgoing url for the route No templatePath The template path of the route No PackageDomainV1 Field Description id The id of the package domain name The full domain name CreatePackageDomainV1 Field Description Optional name The full name of the domain No Data Export NOTE: Data exporting is a gated feature, as it will eventually be part of a paid tier of Scarf. Meanwhile, we're happy to grant free export access to your account, forever - simply drop us a line, or post about how you're using Scarf to social media and we'll permanently bump your account's access level. Aggregated Events for Organizations GET https://scarf.sh/api/v1/organizations/{organization-name}/aggregates?startDate={startDate}&endDate={endDate} Export a newline-delimited stream of JSON encoded AggregateV1 containing breakdowns of package events. Aggregated Events for Users GET https://scarf.sh/api/v1/users/{username}/aggregates?startDate={startDate}&endDate={endDate} Export a newline-delimited stream of JSON encoded AggregateV1 containing breakdowns of package events. AggregateV1 Field Description Optional breakdown One of company , cloud_provider , country , platform , version , client , variable , total No date Date of the aggregation No package The uuid of the package for the aggregate No total Total number of downloads/pulls for breakdown / date / package No company_name Company name ( company breakdown only) Yes company_domain Company domain ( company breakdown only) Yes cloud_provider_name Cloud provider name ( cloud_provider breakdown only) Yes cloud_provider_domain Cloud provider domain ( cloud_provider breakdown only) Yes country Country ( country breakdown only) Yes platform Platform ( platform breakdown only) Yes version Version ( version breakdown only, docker packages only) Yes client Client { client breakdown only) Yes client_version Client version ( client breakdown only) Yes variable Variable ( variable breakdown only, file packages only) Yes value Variable value ( variable breakdown only, file packages only) Yes unique_total Downloads by unqiue ip ( total breakdown only) Yes Package Events GET https://scarf.sh/api/v1/packages/{package-id}/events/{filename}.csv?startDate={startDate}&endDate={endDate} Download a CSV for events relating to the package with UUID package-id with events between startDate (inclusive) and endDate (exclusive). Dates are in YYYY-MM-DD format. filename is ignored by the server and is used for programs (such as browsers) that use the final path part as the name of a file to save. We currently only allow date ranges up to 31 days. Package events include both events for the main package artifact (docker downloads, npm installs, etc.) and events for any documentation insights pixels associated with the package. Pixel events GET https://scarf.sh/api/v1/pixels/events/{filename}.csv?startDate={startDate}&endDate={endDate} Download a CSV for events relating to any documentation insights pixels the user has access to with events between startDate (inclusive) and endDate (exclusive). Dates are in YYYY-MM-DD format. filename is up to the ignored by the server and is just used for programs (such as browsers) that use the final path part as the name of a file to save. We currently only allow date ranges up to 31 days. Download format The v1 event export APIs yield an unordered CSV with a header row, starting with following fields (additional fields may be present at the end): Field Description Optional type The type of event that occurred (e.g. image pull, pixel fetch, file-download) No package The name of the package the event is associated with Yes version The version of the package the event is associated with Yes time The time of the event No referer The value of the HTTP Referer header Yes user_agent The value of the HTTP User-Agent header Yes variables Query string containing matched variables. Only set for file-download events Yes origin_id An opaque ID for the client. Events with identical IDs can be inferred to come from the same client, but differing IDs cannot be assumed to be from different clients Yes origin_latitude An approximate latitude for the client Yes origin_longitude An approximate longitude for the client Yes origin_country The country of the client Yes origin_city The city of the client Yes origin_postal The postal code of the client Yes origin_company The company of the client Yes origin_domain The domain of the client Yes origin_connection_type The type of host the client is running on (e.g. cloud provider, ISP) Yes","title":"API"},{"location":"api/#authentication","text":"All Scarf accounts come with an API token, found on the user details page . To authenticate your requests, add an Authorization header in the form: Authorization: Bearer <token>","title":"Authentication"},{"location":"api/#organizations","text":"This section describes the available API endpoints for managing organizations on Scarf.","title":"Organizations"},{"location":"api/#get-organization","text":"GET https://scarf.sh/api/v1/organizations/{organization-name} Gets the organization with the name organization-name . Returns a JSON -encoded OrganizationV1","title":"Get organization"},{"location":"api/#create-organization","text":"POST https://scarf.sh/api/v1/organizations Create a new organization. The issuer of the request is made owner of the newly created organization. Expects a JSON -encoded OrganizationUpsertV1 in the request body.","title":"Create organization"},{"location":"api/#update-organization","text":"PUT https://scarf.sh/api/v1/organizations/{organization-name} Updates organization with name organization-name . Expects a JSON -encoded OrganizationUpsertV1 in the request body.","title":"Update organization"},{"location":"api/#list-packages","text":"GET https://scarf.sh/api/v1/organizations/{organization-name}/packages List all packages for the organization with name organization-name . Returns a JSON -encoded list of PackageV1","title":"List packages"},{"location":"api/#create-package","text":"POST https://scarf.sh/api/v1/organizations/{organization-name}/packages Create a new package under the organization with name organization-name . Expects a JSON -encoded PackageUpsertV1 in the request body.","title":"Create package"},{"location":"api/#list-users","text":"GET https://scarf.sh/api/v1/organizations/{organization-name}/users List all members of the organization with name organization-name . Returns a JSON -encoded list of OrganizationMemberV1 .","title":"List users"},{"location":"api/#upsert-organization-membership","text":"POST https://scarf.sh/api/v1/organizations/{organization-name}/users Creates or updates a membership for the organization with name organization-name . Expects a JSON -encoded OrganizationMemberUpsertV1 in the request body.","title":"Upsert organization membership"},{"location":"api/#remove-organization-member","text":"DELETE https://scarf.sh/api/v1/organizations/{organization-name}/users/{username} Removes the member username from the organization with name organization-name .","title":"Remove organization member"},{"location":"api/#organizationv1","text":"Field Description Optional name Organization name No description Description of the organization. No website The organization website Yes billingEmail Email addres to use for billing No createdAt When the organization was created No updatedAt When the organization was last updated No","title":"OrganizationV1"},{"location":"api/#organizationupsertv1","text":"Field Description Optional name Organization name No description Description of the organization. No website The organization website Yes billingEmail Email addres to use for billing No","title":"OrganizationUpsertV1"},{"location":"api/#organizationmemberv1","text":"Field Description Optional organizationName Organization name No username The member's username No role The member's role (member, admin, owner) No","title":"OrganizationMemberV1"},{"location":"api/#organizationmemberupsertv1","text":"Field Description Optional username The member's username No role The member's role (member, admin, owner) No","title":"OrganizationMemberUpsertV1"},{"location":"api/#packages-all-package-types","text":"This section describes API endpoints for management of any type of file entry on Scarf.","title":"Packages (All Package Types)"},{"location":"api/#list-packages_1","text":"GET https://scarf.sh/api/v1/packages List all packages for the user. Returns a JSON -encoded list of PackageV1","title":"List packages"},{"location":"api/#get-package","text":"GET https://scarf.sh/api/v1/packages/{package-id} Gets a package with UUID package-id . You can also get the package by specifying the package name e.g. GET https://scarf.sh/api/v1/packages/{package-name} In case you have different packages with the same name, you can use the packageType query parameter to disambiguate e.g. GET https://scarf.sh/api/v1/packages/{package-name}?packageType=docker Returns a JSON -encoded PackageV1","title":"Get package"},{"location":"api/#create-package_1","text":"POST https://scarf.sh/api/v1/packages Create a new package. Expects a JSON -encoded PackageUpsertV1 in the request body.","title":"Create package"},{"location":"api/#update-package","text":"PUT https://scarf.sh/api/v1/packages/{package-id} Updates package with UUID package-id . Expects a JSON -encoded PackageUpsertV1 in the request body. Note that libraryType can't be changed after package creation.","title":"Update package"},{"location":"api/#delete-package","text":"DELETE https://scarf.sh/api/v1/packages/{package-id} Deletes package with UUID package-id .","title":"Delete package"},{"location":"api/#get-package-permissions","text":"GET https://scarf.sh/api/v1/packages/{package-id}/permissions Returns a JSON -encoded list of PackagePermissionGetV1 .","title":"Get package permissions"},{"location":"api/#set-package-permissions","text":"POST https://scarf.sh/api/v1/packages/{package-id}/permissions Modifies permissions for the package based on a single or an array of JSON -encoded PackagePermissionSetV1 in the request body.","title":"Set package permissions"},{"location":"api/#packagev1","text":"Field Description Optional uuid The package's identifier No owner The account name of the package owner No name The name of the package No shortDescription A short description of the package No createdAt When the package was created No longDescription A longer description of the package Yes website The package website Yes libraryType The type of the package (docker, npm, hackage, pypi, other) Yes","title":"PackageV1"},{"location":"api/#packageupsertv1","text":"Field Description Optional name The name of the package No shortDescription A short description of the package No longDescription A longer description of the package Yes website The package website Yes libraryType The type of the package (docker, npm, hackage, pypi, other) Yes backendUrl The backend URL for the docker registry (docker only). Must be a valid URL with at least 1 path component with each path component matching [a-z0-9]+(?:[._-][a-z0-9]+)* Yes publicUrl The public URL for the docker registry (docker only). Must be a valid URL matching backendUrl 's path parts Yes","title":"PackageUpsertV1"},{"location":"api/#packagepermissiongetv1","text":"Field Description Optional username Username of the user to which permissionLevel is assigned No permissionLevel The PackagePermissionLevelV1 the user has assigned No","title":"PackagePermissionGetV1"},{"location":"api/#packagepermissionsetv1","text":"Field Description Optional userQuery A query to look up the user whose permissions we want to set (email or username) No permissionLevel The PackagePermissionLevelV1 to give the user No","title":"PackagePermissionSetV1"},{"location":"api/#packagepermissionlevelv1","text":"Enum value Description blocked The user is blocked from the package default The user has the default access level member The user is a member of the package but cannot administer it admin The user is an admin of the package","title":"PackagePermissionLevelV1"},{"location":"api/#file-packages","text":"File packages on Scarf represent artifacts of any kind of file. Configuration of file packages offer more granular, lower-level controls than other packages types. Path routing is user-defined, rather than the API standards of a given package/container registry.","title":"File Packages"},{"location":"api/#list-package-routes","text":"GET https://scarf.sh/api/v1/packages/{package-id}/routes List all package routes for the user. Returns a JSON -encoded list of PackageRouteV1","title":"List package routes"},{"location":"api/#create-package-route","text":"POST https://scarf.sh/api/v1/packages/{package-id}/routes Create a new package route. Expects a JSON -encoded CreatePackageRouteV1 in the request body.","title":"Create package route"},{"location":"api/#delete-package-route","text":"DELETE https://scarf.sh/api/v1/packages/{package-id}/routes/{route-id} Delete a package route.","title":"Delete package route"},{"location":"api/#list-package-domains","text":"GET https://scarf.sh/api/v1/packages/{package-id}/domains List all package domains for the user. Returns a JSON -encoded list of PackageDomainV1","title":"List package domains"},{"location":"api/#create-package-domain","text":"POST https://scarf.sh/api/v1/packages/{package-id}/domains Create a new package domain. Expects a JSON -encoded CreatePackageDomainV1 in the request body.","title":"Create package domain"},{"location":"api/#delete-package-domains","text":"DELETE https://scarf.sh/api/v1/packages/{package-id}/domains/{domain-id} Deletes a package domain.","title":"Delete package domains"},{"location":"api/#packageroutev1","text":"Field Description id The id of the package route outgoingUrl The outgoing url for the route templatePath The template path of the route","title":"PackageRouteV1"},{"location":"api/#createpackageroutev1","text":"Field Description Optional outgoingUrl The outgoing url for the route No templatePath The template path of the route No","title":"CreatePackageRouteV1"},{"location":"api/#packagedomainv1","text":"Field Description id The id of the package domain name The full domain name","title":"PackageDomainV1"},{"location":"api/#createpackagedomainv1","text":"Field Description Optional name The full name of the domain No","title":"CreatePackageDomainV1"},{"location":"api/#data-export","text":"NOTE: Data exporting is a gated feature, as it will eventually be part of a paid tier of Scarf. Meanwhile, we're happy to grant free export access to your account, forever - simply drop us a line, or post about how you're using Scarf to social media and we'll permanently bump your account's access level.","title":"Data Export"},{"location":"api/#aggregated-events-for-organizations","text":"GET https://scarf.sh/api/v1/organizations/{organization-name}/aggregates?startDate={startDate}&endDate={endDate} Export a newline-delimited stream of JSON encoded AggregateV1 containing breakdowns of package events.","title":"Aggregated Events for Organizations"},{"location":"api/#aggregated-events-for-users","text":"GET https://scarf.sh/api/v1/users/{username}/aggregates?startDate={startDate}&endDate={endDate} Export a newline-delimited stream of JSON encoded AggregateV1 containing breakdowns of package events.","title":"Aggregated Events for Users"},{"location":"api/#aggregatev1","text":"Field Description Optional breakdown One of company , cloud_provider , country , platform , version , client , variable , total No date Date of the aggregation No package The uuid of the package for the aggregate No total Total number of downloads/pulls for breakdown / date / package No company_name Company name ( company breakdown only) Yes company_domain Company domain ( company breakdown only) Yes cloud_provider_name Cloud provider name ( cloud_provider breakdown only) Yes cloud_provider_domain Cloud provider domain ( cloud_provider breakdown only) Yes country Country ( country breakdown only) Yes platform Platform ( platform breakdown only) Yes version Version ( version breakdown only, docker packages only) Yes client Client { client breakdown only) Yes client_version Client version ( client breakdown only) Yes variable Variable ( variable breakdown only, file packages only) Yes value Variable value ( variable breakdown only, file packages only) Yes unique_total Downloads by unqiue ip ( total breakdown only) Yes","title":"AggregateV1"},{"location":"api/#package-events","text":"GET https://scarf.sh/api/v1/packages/{package-id}/events/{filename}.csv?startDate={startDate}&endDate={endDate} Download a CSV for events relating to the package with UUID package-id with events between startDate (inclusive) and endDate (exclusive). Dates are in YYYY-MM-DD format. filename is ignored by the server and is used for programs (such as browsers) that use the final path part as the name of a file to save. We currently only allow date ranges up to 31 days. Package events include both events for the main package artifact (docker downloads, npm installs, etc.) and events for any documentation insights pixels associated with the package.","title":"Package Events"},{"location":"api/#pixel-events","text":"GET https://scarf.sh/api/v1/pixels/events/{filename}.csv?startDate={startDate}&endDate={endDate} Download a CSV for events relating to any documentation insights pixels the user has access to with events between startDate (inclusive) and endDate (exclusive). Dates are in YYYY-MM-DD format. filename is up to the ignored by the server and is just used for programs (such as browsers) that use the final path part as the name of a file to save. We currently only allow date ranges up to 31 days.","title":"Pixel events"},{"location":"api/#download-format","text":"The v1 event export APIs yield an unordered CSV with a header row, starting with following fields (additional fields may be present at the end): Field Description Optional type The type of event that occurred (e.g. image pull, pixel fetch, file-download) No package The name of the package the event is associated with Yes version The version of the package the event is associated with Yes time The time of the event No referer The value of the HTTP Referer header Yes user_agent The value of the HTTP User-Agent header Yes variables Query string containing matched variables. Only set for file-download events Yes origin_id An opaque ID for the client. Events with identical IDs can be inferred to come from the same client, but differing IDs cannot be assumed to be from different clients Yes origin_latitude An approximate latitude for the client Yes origin_longitude An approximate longitude for the client Yes origin_country The country of the client Yes origin_city The city of the client Yes origin_postal The postal code of the client Yes origin_company The company of the client Yes origin_domain The domain of the client Yes origin_connection_type The type of host the client is running on (e.g. cloud provider, ISP) Yes","title":"Download format"},{"location":"gateway/","text":"Overview Scarf Gateway is a service that sits in front of your existing software hosting platform(s), acting as a single access-point to all of your artifacts, regardless of where they are actually hosted. By making it easy to host content from your own domain, Scarf Gateway decouples your distribution from your hosting provider and provides in-depth download analytics. Suppose you maintain a Docker container image acme/rocket-skates on Docker Hub. Your users would normally pull your container image from Docker hub directly ( docker pull acme/rocket-skates .) Using Scarf, they would pull from Scarf Gateway using your private domain ( docker pull docker.acme.com/acme/rocket-skates .) Important analytics are recorded and shared with you while you are using Scarf and you may change your hosting providers at any time without changing your container image name or documentation. Your users will always be using your domain to pull your Docker container images. Your Docker container images can stay on their current hosting provider, but will be served through your own domain, e.g.: # Make your existing container available through your own domain $ docker pull docker.acme.com/acme/rocket-skates # Scarf provides a domain too if you'd prefer to use ours $ docker pull acme.docker.scarf.sh/acme/rocket-skates Data insights about your Docker container image's downloads can be found in your Scarf Dashboard. From there, you can also manage Scarf Gateway configuration, access controls, and more. Configuring Scarf Package Entries Everything that is served and tracked via Scarf Gateway needs a corresponding package entry on scarf.sh . Configuration, analytics, and permissions are all done at the level of a package, or single repository. rocket-skates , acme/rocket-skates are all valid package entries. Because packages can seamlessly change their hosting provider, hostnames (e.g. gcr.io ) are not part of the package identifier on Scarf (e.g. acme/rocket-skates and not gcr.io/acme/rocket-skates .) To create your package entry, click \"New Package\" in the navbar in your Scarf dashboard, or click here . Then select the corresponding package type for your artifact. Container Image Packages Scarf Gateway configuration for a Docker container image entry has two main considerations: Backend URL : This refers to where your container is actually hosted, the location where Scarf will direct requests to pull the container. Scarf will ask for your container's current pull command. This could be rocket-skates , acme/rocket-skates (implicitly specifying Docker Hub as the hosting provider, registry-1.docker.io/acme/rocket-skates ), or a fully qualified container image name docker.acme.come/acme/rocket-skates . You can modify this backend URL attribute later, and your user's Docker pulls will be instantly moved over to the new destination without having to communicate anything to them. Domain : This can be your own domain, or a Scarf-supplied domain, of the form <username>.docker.scarf.sh . By default your Scarf domain will be used if this field is left empty. Note that this will be part of your Docker pull command for your users. While you can update this domain, updating your public domain is a breaking change for any users on the current domain! Edit this value with caution. If you elect to use your own domain, you'll need to add a CNAME for that domain to gateway.scarf.sh . See your DNS provider's instructions for how to add a CNAME. See Figure 0 to see how these pieces fit together visually. File Packages Scarf Gateway configuration for a file package entry has three main considerations: Domain : Just like Docker container images, you may chose to use your own domain(s) for serving files. You may also choose to use <username>.gateway.scarf.sh provided by default by Scarf. Remember, if you elect to use your own domain, you'll need to add a CNAME for that domain to gateway.scarf.sh Incoming Path : This refers to where a path on a given domain where Scarf will direct requests to fetch a file asset. This could be static path like /downloads/rocket-skates.tar.gz or a template path with variables like /files/{version}/{platform}/rocket-skates-{platform}-{version}.tar.gz . You may use variables in your incoming path as specified in https://datatracker.ietf.org/doc/html/rfc6570 . You can modify a path value later, but be careful to communicate to your users because this would be a breaking change. Outgoing URL : This is the full URL to your asset on your HTTP/S hosting provider. It is a template (or static) URL that may also use any variables defined in the Incoming Path. For example https://besthostingprovider.com/acme/{platform}/rocket-skates-{version}.tar.gz See Figure 3 to see how these pieces fit together visually. How it works When a user requests a Docker container image through Scarf, Scarf simply issues a redirect response, pointing to whichever hosting provider you've configured for your container. Certain container runtimes do not handle redirects appropriately during authentication (which is required even for anonymous pulls), and, in those cases, Scarf will proxy the request to the host instead of redirecting. For a visualization of the system from the end-user's perspective, see Figure 1 . For an overview of the entire system, Figure 2 . When a user requests a file through Scarf, Scarf simply issues a redirect response, pointing to whichever hosting provider you've configured for your file. For a visualization of the system from the end-user's perspective, see Figure 4 . For an overview of the entire system, Figure 5 . Dashboard and Data Access Your package's usage data will be made available to you in your Scarf dashboard. You can grant others access to your package's usage data as well from your package details page. Current permission levels supported are: Access Level Description Owner Can read all package-level data, edit package configuration, and grant access to other members Admin Can read all package-level data, edit package configuration, and grant access to other members (but can't remove other admins) Member Can read all package-level data Scarf does not yet support organization-level permissions but will soon. Docker Packages: Defining a container pull Scarf defines a pull based on how Docker Hub defines them for the purposes of their rate-limiting functionality. A pull is defined as one or more GET requests on hosting provider manifest URLs ( /v2/*/manifests/* ). HEAD requests are not counted as a pull. Note that even if a client downloads the blobs that comprise any given container, the container's manifest file may already be cached on the client, meaning the download would not be counted in Scarf's analytics. Future versions of Scarf's data processing pipelines will be more intelligent and will track things like partial downloads, blob fetches, etc. Security All interactions through Scarf Gateway occur over HTTPS. Scarf Gateway will procure a valid TLS certificate via LetsEncrypt , and perform TLS termination for the traffic. Scarf Gateway in turn will issue a redirect for the request, or proxy the request to the hosting provider. Availability Scarf Gateway is a free hosted service that is provided to maintainers and users as-is and as-available. Scarf Gateway is deployed on AWS in multiple regions around the globe; it is fault tolerant even to entire regions going offline, and can automatically and elasticly scale our backend capacity to meet whatever user traffic demands of us. We are expecting to meet a monthly service uptime percentage of 99.9%. Guarantees of our service-level agreement will be made available in the future. To see Scarf's uptime and system status, you can view the status page here . Badges All packages on Scarf Gateway offer dynamic Scarf-powered README badges automatically. Head to your package page, and the badges will be shown in the details section near the top. Copy the URL, paste it into your project\u2019s README based on whatever doc format you are using and you\u2019re all set. What is the difference between the downloads badge and the company badge? The commercial usage badge shows how many distinct companies have been identified to be fetching your Scarf Gateway package in the previous month. The downloads badge reports the total number of downloads across all users. What is the purpose of this badge? README badges let you show off your project by sharing high-level real-time data about your download traffic and commercial adoption, so readers can quickly assess some basic details about your project. Scarf-powered README badges are an easy way to share your project\u2019s usage data publicly, regardless of where on the internet your docs are being rendered. Telling prospective new users how many companies use your project is a great way to show that your project is reliable and worth adopting. What is the URL format of the badges The badges can be used in the following formats: Company Badge https://scarf.sh/package/company-badge/{package-id} https://scarf.sh/company-badge/{username}/{package-name}?package-type={package-type} Downloads Badge https://scarf.sh/package/installs-badge/{package-id} https://scarf.sh/installs-badge/{username}/{package-name}?package-type={package-type} You can also pass some additional settings to your badges via query strings: color , label-color , logo , logo-color and style . For example, https://scarf.sh/package/installs-badge/{package-id}?color=red&style=flat . See https://shields.io/#colors to know more about the supported values for each setting. Caveats and Limitations A given subdomain can only point to a single container registry at a time. If you have Docker container images on multiple distinct registries, you'll currently need to use multiple distinct subdomains (one per hosting provider). This limitation is due to the current implementation of the Docker registry authorization. To begin pulling a container, an authentication request is sent, which must be passed to the hosting provider you configure Scarf Gateway to use. Unfortunately, the initial authorization request doesn't include any information about what image it's trying to pull all Scarf Gateway has to go on is the hostname used to begin to pull the Docker container image. Subsequent Docker API requests do the actual \"pulling\" of an image. The core of the problem is that, if you attempt to authorize with one registry and pull an image from another, it will fail with an authorization error. The path used in your container's new pull command must match the path on the backend container registry If your container is on Docker Hub as acme/rocket-skates , your install command must be: docker pull ~<your-domain.com>/acme/rocket-skates . The image name path (acme/rocket-status) is not something that can be changed at this time. This is due to the Docker client's OAuth implementation (authorization includes the image name path of the being requested.) If Scarf Gateway redirects to a different path, the authorization becomes invalid and the Docker pull will fail. Automatic Package Creation for Containers Rather than creating packages entries for each container in your namespace, you can specify rules to automaically forward all matching traffic and create package entries automatically. By using a template, e.g. repository/* , every time an image matching that template is first downloaded, Scarf will automatically create a page for that package (e.g. repository/test01, repository/new-item). Creating an Auto Package Rule from Settings To get started, navigate to your user-settings page. Next, please navigate to the Automatic Creation Paths table. Here, you\u2019ll find all your current templates- with the options to edit, delete, and create new rules. To create a new rule, please first insert the template that will be used. It can be anything of the form: repository/* , repository/{ variable1, variable2 } , etc. Next, insert the backend domain, the domain where your images are hosted (e.g. registry-1.docker.io, ghcr.io, gcr.io). Please keep in mind, each public domain should map to one backend domain. (E.g. If you\u2019re using your Scarf domain for your images hosted on docker, you will not be able to use your Scarf domain for your images hosted on Amazon.) Submit your new rule! Creating an Auto Package Rule for Your Organization To begin, navigate to \u201cManage Organizations.\u201d Please select the organization you would like to add a template for. In the Edit Organization Details page for that specific organization, you will find the Auto Creation Paths table at the very bottom. From here, please first insert the template that will be used. It can be anything of the form: repository/* , repository/{ variable1, variable2 } , etc. Next, insert the backend domain, the domain where your images are hosted (e.g. registry-1.docker.io, ghcr.io, gcr.io). Please keep in mind, each public domain should map to one backend domain. (E.g. If you\u2019re using your Scarf domain for your images hosted on docker, you will not be able to use your Scarf domain for your images hosted on Amazon.) Submit your new rule! FAQ How do I get started using Scarf Gateway? First, create an account on Scarf, if you haven\u2019t already done so. Once you\u2019ve registered, you\u2019ll be prompted to create a new package. If you\u2019re already using Scarf, you\u2019ll be able to click \u201cNew Package\u201d in the navigation bar. Select \u201cDocker\u201d for your package type and enter in the requested details about your container. Scarf Gateway currently supports Docker containers. Support for more package and artifact types are on the way. Stay tuned. If I use a custom domain to host my container through Scarf, what happens to my existing users? Do they all have to update? Hosting containers on your custom domain via Scarf has no impact on your existing users; your domain adds a new path for users to download your package. You can encourage end-users to switch their pull commands over to your new domain, but they can continue pulling directly from your registry provider with no negative impact. Should you decide to switch registries later on, current users will have to update their pull commands to either your custom domain or to the new registry URL. If they go straight to the registry, they would need to update every time you decide to switch registries. If they use your custom domain, they will never need to update it again. Are you actually hosting my packages? No, your package continues to be hosted on your current hosting provider not on Scarf itself. Scarf Gateway is simply a thin redirect layer in front of your provider. Since Scarf Gateway acts as a stable location on the internet for your packages, you will always have the freedom to host them with any provider you choose. My Docker container image name on my current registry is acme/rocket-skates , can I change that to just rocket-skates when users pull through Scarf? Unfortunately this is not possible unless you can change this name on the registry that hosts your container. Your container name on Scarf must match the container name on the registry that hosts it, because the Docker client uses that name to sign the request and validate the response from the registry. The Docker client will reject the download if the response signature is invalid. See the Caveats section for more information. How are you managing the usage data you get about my project? Are you storing my users\u2019 data? Scarf Gateway does not store any personally identifying information or sensitive data about your users. Scarf looks up IP address metadata, but the raw IP addresses are discarded and never exposed. IP metadata may contain: Coarse-grained location Device/OS information Company information, cloud providers, etc. Additionally, Scarf sees metadata about the containers that are being downloaded such as: Tags/versions (variables) Client runtime and version What package types are you planning to support next? We\u2019d love your input to help us prioritize support for additional package types. Java, Python, and others are planned. Scarf Gateway will ultimately be generalized to support arbitrary artifact types. How much does it cost to use Scarf Gateway? Scarf Gateway\u2019s current feature set is free and will remain free. We will be adding additional functionality, features, service level agreements, and more, some free and some paid. Is Scarf Gateway self-hosted or managed by Scarf? Scarf Gateway is managed by the Scarf team. We plan an open source release of Scarf Gateway for self-hosting, when it is out of the current open beta period and into general availability. How long will it take for any given container download to show up in my analytics dashboard? Downloads will typically show up in your dashboard within minutes. Is there an API I can use to pull my stats, manage my packages, etc? Yes! See our API documentation for more information. I have more questions, where is the best place to ask? Join us in Slack , we're more than happy to help. Figures Figure 0: Using Scarf (Docker) Gateway as a maintainer Figure 1: Pulling a Docker container image from Scarf (Docker) Gateway as a User Figure 2: Full System Diagram (Docker) Figure 3: Using Scarf (File) Gateway as a maintainer Figure 4: Downloading a File from Scarf (File) Gateway as a User Figure 5: Full System Diagram (File)","title":"Scarf Gateway"},{"location":"gateway/#overview","text":"Scarf Gateway is a service that sits in front of your existing software hosting platform(s), acting as a single access-point to all of your artifacts, regardless of where they are actually hosted. By making it easy to host content from your own domain, Scarf Gateway decouples your distribution from your hosting provider and provides in-depth download analytics. Suppose you maintain a Docker container image acme/rocket-skates on Docker Hub. Your users would normally pull your container image from Docker hub directly ( docker pull acme/rocket-skates .) Using Scarf, they would pull from Scarf Gateway using your private domain ( docker pull docker.acme.com/acme/rocket-skates .) Important analytics are recorded and shared with you while you are using Scarf and you may change your hosting providers at any time without changing your container image name or documentation. Your users will always be using your domain to pull your Docker container images. Your Docker container images can stay on their current hosting provider, but will be served through your own domain, e.g.: # Make your existing container available through your own domain $ docker pull docker.acme.com/acme/rocket-skates # Scarf provides a domain too if you'd prefer to use ours $ docker pull acme.docker.scarf.sh/acme/rocket-skates Data insights about your Docker container image's downloads can be found in your Scarf Dashboard. From there, you can also manage Scarf Gateway configuration, access controls, and more.","title":"Overview"},{"location":"gateway/#configuring","text":"","title":"Configuring"},{"location":"gateway/#scarf-package-entries","text":"Everything that is served and tracked via Scarf Gateway needs a corresponding package entry on scarf.sh . Configuration, analytics, and permissions are all done at the level of a package, or single repository. rocket-skates , acme/rocket-skates are all valid package entries. Because packages can seamlessly change their hosting provider, hostnames (e.g. gcr.io ) are not part of the package identifier on Scarf (e.g. acme/rocket-skates and not gcr.io/acme/rocket-skates .) To create your package entry, click \"New Package\" in the navbar in your Scarf dashboard, or click here . Then select the corresponding package type for your artifact.","title":"Scarf Package Entries"},{"location":"gateway/#container-image-packages","text":"Scarf Gateway configuration for a Docker container image entry has two main considerations: Backend URL : This refers to where your container is actually hosted, the location where Scarf will direct requests to pull the container. Scarf will ask for your container's current pull command. This could be rocket-skates , acme/rocket-skates (implicitly specifying Docker Hub as the hosting provider, registry-1.docker.io/acme/rocket-skates ), or a fully qualified container image name docker.acme.come/acme/rocket-skates . You can modify this backend URL attribute later, and your user's Docker pulls will be instantly moved over to the new destination without having to communicate anything to them. Domain : This can be your own domain, or a Scarf-supplied domain, of the form <username>.docker.scarf.sh . By default your Scarf domain will be used if this field is left empty. Note that this will be part of your Docker pull command for your users. While you can update this domain, updating your public domain is a breaking change for any users on the current domain! Edit this value with caution. If you elect to use your own domain, you'll need to add a CNAME for that domain to gateway.scarf.sh . See your DNS provider's instructions for how to add a CNAME. See Figure 0 to see how these pieces fit together visually.","title":"Container Image Packages"},{"location":"gateway/#file-packages","text":"Scarf Gateway configuration for a file package entry has three main considerations: Domain : Just like Docker container images, you may chose to use your own domain(s) for serving files. You may also choose to use <username>.gateway.scarf.sh provided by default by Scarf. Remember, if you elect to use your own domain, you'll need to add a CNAME for that domain to gateway.scarf.sh Incoming Path : This refers to where a path on a given domain where Scarf will direct requests to fetch a file asset. This could be static path like /downloads/rocket-skates.tar.gz or a template path with variables like /files/{version}/{platform}/rocket-skates-{platform}-{version}.tar.gz . You may use variables in your incoming path as specified in https://datatracker.ietf.org/doc/html/rfc6570 . You can modify a path value later, but be careful to communicate to your users because this would be a breaking change. Outgoing URL : This is the full URL to your asset on your HTTP/S hosting provider. It is a template (or static) URL that may also use any variables defined in the Incoming Path. For example https://besthostingprovider.com/acme/{platform}/rocket-skates-{version}.tar.gz See Figure 3 to see how these pieces fit together visually.","title":"File Packages"},{"location":"gateway/#how-it-works","text":"When a user requests a Docker container image through Scarf, Scarf simply issues a redirect response, pointing to whichever hosting provider you've configured for your container. Certain container runtimes do not handle redirects appropriately during authentication (which is required even for anonymous pulls), and, in those cases, Scarf will proxy the request to the host instead of redirecting. For a visualization of the system from the end-user's perspective, see Figure 1 . For an overview of the entire system, Figure 2 . When a user requests a file through Scarf, Scarf simply issues a redirect response, pointing to whichever hosting provider you've configured for your file. For a visualization of the system from the end-user's perspective, see Figure 4 . For an overview of the entire system, Figure 5 . Dashboard and Data Access Your package's usage data will be made available to you in your Scarf dashboard. You can grant others access to your package's usage data as well from your package details page. Current permission levels supported are: Access Level Description Owner Can read all package-level data, edit package configuration, and grant access to other members Admin Can read all package-level data, edit package configuration, and grant access to other members (but can't remove other admins) Member Can read all package-level data Scarf does not yet support organization-level permissions but will soon.","title":"How it works"},{"location":"gateway/#docker-packages-defining-a-container-pull","text":"Scarf defines a pull based on how Docker Hub defines them for the purposes of their rate-limiting functionality. A pull is defined as one or more GET requests on hosting provider manifest URLs ( /v2/*/manifests/* ). HEAD requests are not counted as a pull. Note that even if a client downloads the blobs that comprise any given container, the container's manifest file may already be cached on the client, meaning the download would not be counted in Scarf's analytics. Future versions of Scarf's data processing pipelines will be more intelligent and will track things like partial downloads, blob fetches, etc.","title":"Docker Packages: Defining a container pull"},{"location":"gateway/#security","text":"All interactions through Scarf Gateway occur over HTTPS. Scarf Gateway will procure a valid TLS certificate via LetsEncrypt , and perform TLS termination for the traffic. Scarf Gateway in turn will issue a redirect for the request, or proxy the request to the hosting provider.","title":"Security"},{"location":"gateway/#availability","text":"Scarf Gateway is a free hosted service that is provided to maintainers and users as-is and as-available. Scarf Gateway is deployed on AWS in multiple regions around the globe; it is fault tolerant even to entire regions going offline, and can automatically and elasticly scale our backend capacity to meet whatever user traffic demands of us. We are expecting to meet a monthly service uptime percentage of 99.9%. Guarantees of our service-level agreement will be made available in the future. To see Scarf's uptime and system status, you can view the status page here .","title":"Availability"},{"location":"gateway/#badges","text":"All packages on Scarf Gateway offer dynamic Scarf-powered README badges automatically. Head to your package page, and the badges will be shown in the details section near the top. Copy the URL, paste it into your project\u2019s README based on whatever doc format you are using and you\u2019re all set. What is the difference between the downloads badge and the company badge? The commercial usage badge shows how many distinct companies have been identified to be fetching your Scarf Gateway package in the previous month. The downloads badge reports the total number of downloads across all users. What is the purpose of this badge? README badges let you show off your project by sharing high-level real-time data about your download traffic and commercial adoption, so readers can quickly assess some basic details about your project. Scarf-powered README badges are an easy way to share your project\u2019s usage data publicly, regardless of where on the internet your docs are being rendered. Telling prospective new users how many companies use your project is a great way to show that your project is reliable and worth adopting. What is the URL format of the badges The badges can be used in the following formats: Company Badge https://scarf.sh/package/company-badge/{package-id} https://scarf.sh/company-badge/{username}/{package-name}?package-type={package-type} Downloads Badge https://scarf.sh/package/installs-badge/{package-id} https://scarf.sh/installs-badge/{username}/{package-name}?package-type={package-type} You can also pass some additional settings to your badges via query strings: color , label-color , logo , logo-color and style . For example, https://scarf.sh/package/installs-badge/{package-id}?color=red&style=flat . See https://shields.io/#colors to know more about the supported values for each setting.","title":"Badges"},{"location":"gateway/#caveats-and-limitations","text":"A given subdomain can only point to a single container registry at a time. If you have Docker container images on multiple distinct registries, you'll currently need to use multiple distinct subdomains (one per hosting provider). This limitation is due to the current implementation of the Docker registry authorization. To begin pulling a container, an authentication request is sent, which must be passed to the hosting provider you configure Scarf Gateway to use. Unfortunately, the initial authorization request doesn't include any information about what image it's trying to pull all Scarf Gateway has to go on is the hostname used to begin to pull the Docker container image. Subsequent Docker API requests do the actual \"pulling\" of an image. The core of the problem is that, if you attempt to authorize with one registry and pull an image from another, it will fail with an authorization error. The path used in your container's new pull command must match the path on the backend container registry If your container is on Docker Hub as acme/rocket-skates , your install command must be: docker pull ~<your-domain.com>/acme/rocket-skates . The image name path (acme/rocket-status) is not something that can be changed at this time. This is due to the Docker client's OAuth implementation (authorization includes the image name path of the being requested.) If Scarf Gateway redirects to a different path, the authorization becomes invalid and the Docker pull will fail.","title":"Caveats and Limitations"},{"location":"gateway/#automatic-package-creation-for-containers","text":"Rather than creating packages entries for each container in your namespace, you can specify rules to automaically forward all matching traffic and create package entries automatically. By using a template, e.g. repository/* , every time an image matching that template is first downloaded, Scarf will automatically create a page for that package (e.g. repository/test01, repository/new-item).","title":"Automatic Package Creation for Containers"},{"location":"gateway/#creating-an-auto-package-rule-from-settings","text":"To get started, navigate to your user-settings page. Next, please navigate to the Automatic Creation Paths table. Here, you\u2019ll find all your current templates- with the options to edit, delete, and create new rules. To create a new rule, please first insert the template that will be used. It can be anything of the form: repository/* , repository/{ variable1, variable2 } , etc. Next, insert the backend domain, the domain where your images are hosted (e.g. registry-1.docker.io, ghcr.io, gcr.io). Please keep in mind, each public domain should map to one backend domain. (E.g. If you\u2019re using your Scarf domain for your images hosted on docker, you will not be able to use your Scarf domain for your images hosted on Amazon.) Submit your new rule!","title":"Creating an Auto Package Rule from Settings"},{"location":"gateway/#creating-an-auto-package-rule-for-your-organization","text":"To begin, navigate to \u201cManage Organizations.\u201d Please select the organization you would like to add a template for. In the Edit Organization Details page for that specific organization, you will find the Auto Creation Paths table at the very bottom. From here, please first insert the template that will be used. It can be anything of the form: repository/* , repository/{ variable1, variable2 } , etc. Next, insert the backend domain, the domain where your images are hosted (e.g. registry-1.docker.io, ghcr.io, gcr.io). Please keep in mind, each public domain should map to one backend domain. (E.g. If you\u2019re using your Scarf domain for your images hosted on docker, you will not be able to use your Scarf domain for your images hosted on Amazon.) Submit your new rule!","title":"Creating an Auto Package Rule for Your Organization"},{"location":"gateway/#faq","text":"How do I get started using Scarf Gateway? First, create an account on Scarf, if you haven\u2019t already done so. Once you\u2019ve registered, you\u2019ll be prompted to create a new package. If you\u2019re already using Scarf, you\u2019ll be able to click \u201cNew Package\u201d in the navigation bar. Select \u201cDocker\u201d for your package type and enter in the requested details about your container. Scarf Gateway currently supports Docker containers. Support for more package and artifact types are on the way. Stay tuned. If I use a custom domain to host my container through Scarf, what happens to my existing users? Do they all have to update? Hosting containers on your custom domain via Scarf has no impact on your existing users; your domain adds a new path for users to download your package. You can encourage end-users to switch their pull commands over to your new domain, but they can continue pulling directly from your registry provider with no negative impact. Should you decide to switch registries later on, current users will have to update their pull commands to either your custom domain or to the new registry URL. If they go straight to the registry, they would need to update every time you decide to switch registries. If they use your custom domain, they will never need to update it again. Are you actually hosting my packages? No, your package continues to be hosted on your current hosting provider not on Scarf itself. Scarf Gateway is simply a thin redirect layer in front of your provider. Since Scarf Gateway acts as a stable location on the internet for your packages, you will always have the freedom to host them with any provider you choose. My Docker container image name on my current registry is acme/rocket-skates , can I change that to just rocket-skates when users pull through Scarf? Unfortunately this is not possible unless you can change this name on the registry that hosts your container. Your container name on Scarf must match the container name on the registry that hosts it, because the Docker client uses that name to sign the request and validate the response from the registry. The Docker client will reject the download if the response signature is invalid. See the Caveats section for more information. How are you managing the usage data you get about my project? Are you storing my users\u2019 data? Scarf Gateway does not store any personally identifying information or sensitive data about your users. Scarf looks up IP address metadata, but the raw IP addresses are discarded and never exposed. IP metadata may contain: Coarse-grained location Device/OS information Company information, cloud providers, etc. Additionally, Scarf sees metadata about the containers that are being downloaded such as: Tags/versions (variables) Client runtime and version What package types are you planning to support next? We\u2019d love your input to help us prioritize support for additional package types. Java, Python, and others are planned. Scarf Gateway will ultimately be generalized to support arbitrary artifact types. How much does it cost to use Scarf Gateway? Scarf Gateway\u2019s current feature set is free and will remain free. We will be adding additional functionality, features, service level agreements, and more, some free and some paid. Is Scarf Gateway self-hosted or managed by Scarf? Scarf Gateway is managed by the Scarf team. We plan an open source release of Scarf Gateway for self-hosting, when it is out of the current open beta period and into general availability. How long will it take for any given container download to show up in my analytics dashboard? Downloads will typically show up in your dashboard within minutes. Is there an API I can use to pull my stats, manage my packages, etc? Yes! See our API documentation for more information. I have more questions, where is the best place to ask? Join us in Slack , we're more than happy to help.","title":"FAQ"},{"location":"gateway/#figures","text":"","title":"Figures"},{"location":"gateway/#figure-0-using-scarf-docker-gateway-as-a-maintainer","text":"","title":"Figure 0: Using Scarf (Docker) Gateway as a maintainer"},{"location":"gateway/#figure-1-pulling-a-docker-container-image-from-scarf-docker-gateway-as-a-user","text":"","title":"Figure 1: Pulling a Docker container image from Scarf (Docker) Gateway as a User"},{"location":"gateway/#figure-2-full-system-diagram-docker","text":"","title":"Figure 2: Full System Diagram (Docker)"},{"location":"gateway/#figure-3-using-scarf-file-gateway-as-a-maintainer","text":"","title":"Figure 3: Using Scarf (File) Gateway as a maintainer"},{"location":"gateway/#figure-4-downloading-a-file-from-scarf-file-gateway-as-a-user","text":"","title":"Figure 4: Downloading a File from Scarf (File) Gateway as a User"},{"location":"gateway/#figure-5-full-system-diagram-file","text":"","title":"Figure 5: Full System Diagram (File)"},{"location":"organization/","text":"Creating an organization To create an organization, navigate to your Scarf dashboard. Clicking the username dropdown will bring a few new options: Your dashboard Dashboards for each organization you belong to Manage organizations Create an organization Here, you\u2019ll want to click on \u201cCreate an organization\u201d: This will take you to the Create an Organization form: There are two distinct ways to create an organization: Converting your current account to an organization If your current username is what you would like your organization to be called, you can to convert your account into an organization. To do this, please follow the steps below: STEP 1: Check \u201cConvert my account to an Org\u201d at the top of the form. This action takes your current username and transfers it to your new organization. You will be prompted to enter a new username that will be given to your user account to replace the transferred one. All of your account\u2019s packages will be transferred to the new organization. STEP 2: Choose a fresh username of your liking! Your new username will be used to generate Scarf links for your user account as usual. STEP 3: Fill out the rest of the form. STEP 4: Click submit! The conversion process will begin, and your account\u2019s packages will be moved to the new organization. You will be logged out and can then log back in with your new username. After logging in, you\u2019ll see that you\u2019ll be taken to the new user dashboard. Don\u2019t be alarmed! This means your packages have been moved successfully under your new organization. If you click the dropdown at the top, you\u2019ll notice a new option underneath your username. That\u2019s correct! It\u2019s your new organization. Using the dropdown menu, you can switch views between your personal user and your various organizations: Directly creating an organization STEP 1: Choose an organization name and fill out the form with the correct details. STEP 2: Hit submit! You will be taken to the Manage Organizations page, where your new organization will be listed.","title":"Organizations"},{"location":"organization/#creating-an-organization","text":"To create an organization, navigate to your Scarf dashboard. Clicking the username dropdown will bring a few new options: Your dashboard Dashboards for each organization you belong to Manage organizations Create an organization Here, you\u2019ll want to click on \u201cCreate an organization\u201d: This will take you to the Create an Organization form: There are two distinct ways to create an organization:","title":"Creating an organization"},{"location":"organization/#converting-your-current-account-to-an-organization","text":"If your current username is what you would like your organization to be called, you can to convert your account into an organization. To do this, please follow the steps below: STEP 1: Check \u201cConvert my account to an Org\u201d at the top of the form. This action takes your current username and transfers it to your new organization. You will be prompted to enter a new username that will be given to your user account to replace the transferred one. All of your account\u2019s packages will be transferred to the new organization. STEP 2: Choose a fresh username of your liking! Your new username will be used to generate Scarf links for your user account as usual. STEP 3: Fill out the rest of the form. STEP 4: Click submit! The conversion process will begin, and your account\u2019s packages will be moved to the new organization. You will be logged out and can then log back in with your new username. After logging in, you\u2019ll see that you\u2019ll be taken to the new user dashboard. Don\u2019t be alarmed! This means your packages have been moved successfully under your new organization. If you click the dropdown at the top, you\u2019ll notice a new option underneath your username. That\u2019s correct! It\u2019s your new organization. Using the dropdown menu, you can switch views between your personal user and your various organizations:","title":"Converting your current account to an organization"},{"location":"organization/#directly-creating-an-organization","text":"STEP 1: Choose an organization name and fill out the form with the correct details. STEP 2: Hit submit! You will be taken to the Manage Organizations page, where your new organization will be listed.","title":"Directly creating an organization"},{"location":"package-analytics/","text":"Scarf SDKs for library and package authors Scarf's programming language SDKs provide observability into the usage of your libraries and language-specific packages. By adding a dependency to scarf-js or another Scarf language-level library, you can gain better data insights into how your package is used, and by which companies. JavaScript Features Collects basic installation statistics on npm install . No dependencies Fully transparent to the user. Scarf will log its behavior to the console during installation. It will never silently report analytics for someone that hasn't explictly given permission to do so. Never interrupts your package installation. Reporting is done on a best effort basis. You can find scarf-js on GitHub or on npm directly. Installation You'll first need to create a package entry on Scarf. Be sure to select \"External library\", and set the package type to \"npm\". Once created, add a dependency on this library to your own: npm i --save @scarf/scarf Once your library is published to npm with this change, Scarf will automatically collect stats on install, no additional code is required! Head to your package's dashboard on Scarf to see your reports when available. How does it work? scarf-js registers a postInstall hook that sends telemetry information. This library has no runtime footprint, it only runs at installation time, when a developer runs npm install Continue reading below here Configuration Users of your package will be opted in by default and can opt out by setting the SCARF_ANALYTICS=false environment variable. If you'd prefer to set Scarf analytics to be opt-in instead, you can set this by adding an entry to your package.json // your-package/package.json { // ... \"scarfSettings\": { \"defaultOptIn\": false } // ... } Scarf will now be opt-out by default, and users can set SCARF_ANALYTICS=true to opt in. Regardless of the default state, Scarf will log what it is doing to users who haven't explictly opted in or out. By default, scarf-js will only trigger analytics when your package is installed as a dependency of another package, or is being installed globally. This ensures that scarf-js analytics will not be triggered on npm install being run within your project . To change this, you can add: // your-package/package.json { // ... \"scarfSettings\": { \"allowTopLevel\": true } // ... } FAQ What information does scarf-js provide me as a package author? Understanding your user-base Which companies and organizations are using your package? Is your project growing or shrinking? Where? On which platforms? Which versions of your package are being used? What information does scarf js send? See more here . As a user of a package using scarf-js, how can I opt out of analytics? Scarf's analytics help support developers of the open source packages you are using, and provide data insights to help improve their software, so your opt-in is appreciated. However, if you'd like to opt out, you can add your preference to your project's package.json : // your-package/package.json { // ... \"scarfSettings\": { \"enabled\": false } // ... } Alternatively, you can set this variable in your environment: export SCARF_ANALYTICS=false Either route will disable Scarf for all packages. How can I inspect the JSON payload that scarf-js sends? scarf-js will run in verbose mode depending on the SCARF_VERBOSE environment variable: export SCARF_VERBOSE=true It will print out the JSON payload, as well as any debugging information. I distribute a package on npm, and scarf-js is in our dependency tree. Can I disable the analytics for my downstream dependents? Yes. By opting out of analytics via package.json , any package upstream will have analytics disbabled. // your-package/package.json { // ... \"scarfSettings\": { \"enabled\": false } // ... } Installers of your packages will have scarf-js disabled for all dependencies upstream from yours. I have more questions, where is the best place to ask Join us in Slack , we're more than happy to help. Developing Setting the environment variable SCARF_LOCAL_PORT=8080 will configure Scarf to use http://localhost:8080 as the analytics endpoint host. Data collection and privacy Scarf does not store any personally identifying information from SDK telemetry data. Scarf only collects information that is helpful for: Package maintenance Identifying which companies are using a particular package, in order to enable support agreements between developers and commercial entities. Specifically, scarf-js sends: The operating system you are using. Your IP address will be used to look up any available company information. Scarf does not store the actual IP address Limited dependency tree information. Scarf sends the name and version of the package(s) that directly depend on scarf-js. Additionally, scarf-js will send SHA256-hashed name and version for the following packages in the dependency tree: Packages that depend on a package that depends on scarf-js. The root package of the dependency tree. This allows Scarf to provide maintainers with information about which public packages are using theirs, without exposing identifying details of non-public packages. More languages coming soon We're working to build out sibling libraries for various languages beyond JavaScript. If you're interested in using Scarf in a language we haven't released yet, let us know!","title":"SDKs for Package Authors"},{"location":"package-analytics/#scarf-sdks-for-library-and-package-authors","text":"Scarf's programming language SDKs provide observability into the usage of your libraries and language-specific packages. By adding a dependency to scarf-js or another Scarf language-level library, you can gain better data insights into how your package is used, and by which companies.","title":"Scarf SDKs for library and package authors"},{"location":"package-analytics/#javascript","text":"","title":"JavaScript"},{"location":"package-analytics/#features","text":"Collects basic installation statistics on npm install . No dependencies Fully transparent to the user. Scarf will log its behavior to the console during installation. It will never silently report analytics for someone that hasn't explictly given permission to do so. Never interrupts your package installation. Reporting is done on a best effort basis. You can find scarf-js on GitHub or on npm directly.","title":"Features"},{"location":"package-analytics/#installation","text":"You'll first need to create a package entry on Scarf. Be sure to select \"External library\", and set the package type to \"npm\". Once created, add a dependency on this library to your own: npm i --save @scarf/scarf Once your library is published to npm with this change, Scarf will automatically collect stats on install, no additional code is required! Head to your package's dashboard on Scarf to see your reports when available.","title":"Installation"},{"location":"package-analytics/#how-does-it-work","text":"scarf-js registers a postInstall hook that sends telemetry information. This library has no runtime footprint, it only runs at installation time, when a developer runs npm install Continue reading below here","title":"How does it work?"},{"location":"package-analytics/#configuration","text":"Users of your package will be opted in by default and can opt out by setting the SCARF_ANALYTICS=false environment variable. If you'd prefer to set Scarf analytics to be opt-in instead, you can set this by adding an entry to your package.json // your-package/package.json { // ... \"scarfSettings\": { \"defaultOptIn\": false } // ... } Scarf will now be opt-out by default, and users can set SCARF_ANALYTICS=true to opt in. Regardless of the default state, Scarf will log what it is doing to users who haven't explictly opted in or out. By default, scarf-js will only trigger analytics when your package is installed as a dependency of another package, or is being installed globally. This ensures that scarf-js analytics will not be triggered on npm install being run within your project . To change this, you can add: // your-package/package.json { // ... \"scarfSettings\": { \"allowTopLevel\": true } // ... }","title":"Configuration"},{"location":"package-analytics/#faq","text":"","title":"FAQ"},{"location":"package-analytics/#what-information-does-scarf-js-provide-me-as-a-package-author","text":"Understanding your user-base Which companies and organizations are using your package? Is your project growing or shrinking? Where? On which platforms? Which versions of your package are being used?","title":"What information does scarf-js provide me as a package author?"},{"location":"package-analytics/#what-information-does-scarf-js-send","text":"See more here .","title":"What information does scarf js send?"},{"location":"package-analytics/#as-a-user-of-a-package-using-scarf-js-how-can-i-opt-out-of-analytics","text":"Scarf's analytics help support developers of the open source packages you are using, and provide data insights to help improve their software, so your opt-in is appreciated. However, if you'd like to opt out, you can add your preference to your project's package.json : // your-package/package.json { // ... \"scarfSettings\": { \"enabled\": false } // ... } Alternatively, you can set this variable in your environment: export SCARF_ANALYTICS=false Either route will disable Scarf for all packages.","title":"As a user of a package using scarf-js, how can I opt out of analytics?"},{"location":"package-analytics/#how-can-i-inspect-the-json-payload-that-scarf-js-sends","text":"scarf-js will run in verbose mode depending on the SCARF_VERBOSE environment variable: export SCARF_VERBOSE=true It will print out the JSON payload, as well as any debugging information.","title":"How can I inspect the JSON payload that scarf-js sends?"},{"location":"package-analytics/#i-distribute-a-package-on-npm-and-scarf-js-is-in-our-dependency-tree-can-i-disable-the-analytics-for-my-downstream-dependents","text":"Yes. By opting out of analytics via package.json , any package upstream will have analytics disbabled. // your-package/package.json { // ... \"scarfSettings\": { \"enabled\": false } // ... } Installers of your packages will have scarf-js disabled for all dependencies upstream from yours.","title":"I distribute a package on npm, and scarf-js is in our dependency tree. Can I disable the analytics for my downstream dependents?"},{"location":"package-analytics/#i-have-more-questions-where-is-the-best-place-to-ask","text":"Join us in Slack , we're more than happy to help.","title":"I have more questions, where is the best place to ask"},{"location":"package-analytics/#developing","text":"Setting the environment variable SCARF_LOCAL_PORT=8080 will configure Scarf to use http://localhost:8080 as the analytics endpoint host.","title":"Developing"},{"location":"package-analytics/#data-collection-and-privacy","text":"Scarf does not store any personally identifying information from SDK telemetry data. Scarf only collects information that is helpful for: Package maintenance Identifying which companies are using a particular package, in order to enable support agreements between developers and commercial entities. Specifically, scarf-js sends: The operating system you are using. Your IP address will be used to look up any available company information. Scarf does not store the actual IP address Limited dependency tree information. Scarf sends the name and version of the package(s) that directly depend on scarf-js. Additionally, scarf-js will send SHA256-hashed name and version for the following packages in the dependency tree: Packages that depend on a package that depends on scarf-js. The root package of the dependency tree. This allows Scarf to provide maintainers with information about which public packages are using theirs, without exposing identifying details of non-public packages.","title":"Data collection and privacy"},{"location":"package-analytics/#more-languages-coming-soon","text":"We're working to build out sibling libraries for various languages beyond JavaScript. If you're interested in using Scarf in a language we haven't released yet, let us know!","title":"More languages coming soon"},{"location":"project-status/","text":"Project status Scarf is still in its early stages and is under heavy development. Feedback of any kind of welcome. Tell us what you think! Reach out to feedback@scarf.sh or open an issue on GitHub for feature requests, bug reports, questions and comments.","title":"Project status"},{"location":"project-status/#project-status","text":"Scarf is still in its early stages and is under heavy development. Feedback of any kind of welcome. Tell us what you think! Reach out to feedback@scarf.sh or open an issue on GitHub for feature requests, bug reports, questions and comments.","title":"Project status"},{"location":"web-traffic/","text":"Scarf can help you identify your commercial users via the web traffic to your project's documentation pages, READMEs, and other web properties. Unlike traditional JavaScript-based web analytics, image-based telemetry works in places where JavaScript execution is not accessible. If you observe commercial users who frequently view your project documentation, this can indicate an opportunity for landing support contracts or even potential sponsorship, to financially support your project. Features Scarf's project Documentation Insights offers insights into: Which businesses are looking at your project's documentation. Aggregated location information associated with this web traffic. Which parts of your documentation are looked at most. With tooling that works in READMEs (or rendered docs generally), emails, and other places on the web where JavaScript is not typically executed. How it works Scarf gathers web traffic insights via a simple transparent tracking pixel. You copy an <img> tag from Scarf into your project's README, docs, or any other web property, and any time a user loads the image from us, Scarf will look up any business metadata associated with the address and surface that information to you (and only you) via your free Scarf account. Scarf does not store the IP address itself, so no personally identifiable information is collected. Getting started Head to your Scarf dashboard and locate the Documentation Insights Management section. Give your pixel(s) a name, and optionally attach it to a package you manage on Scarf. Click the \"copy\" button to copy the <img> tag to your clipboard, and then paste the tag into your project's README, docs, and any other web properties where you want to gather insights into who is using your documentation pages. Caveats Data Precision View counts from Documentation Insights data should be considered as approximate and not exact. Page loads are a noisy signal, and Scarf's infrastructure that serves your tracking pixel is optimized to always load quickly and never get in the way, rather than having an exact page load count. Sources Pixel-based telemetry will work on standard webpages, rendered markdown documentation on package registry sites like npm and PyPi , and anywhere an image can be embedded, with a notable exception being GitHub. When GitHub renders markdown, it rewrites URLs from their original web address to https://camo.githubusercontent.com/ , where GitHub hosts any linked images themselves. This prevents Scarf from providing insights to maintainers, since all that can now be detected at the original web address via the tracking pixel is undifferentiated traffic from GitHub.","title":"Documentation Insights"},{"location":"web-traffic/#features","text":"Scarf's project Documentation Insights offers insights into: Which businesses are looking at your project's documentation. Aggregated location information associated with this web traffic. Which parts of your documentation are looked at most. With tooling that works in READMEs (or rendered docs generally), emails, and other places on the web where JavaScript is not typically executed.","title":"Features"},{"location":"web-traffic/#how-it-works","text":"Scarf gathers web traffic insights via a simple transparent tracking pixel. You copy an <img> tag from Scarf into your project's README, docs, or any other web property, and any time a user loads the image from us, Scarf will look up any business metadata associated with the address and surface that information to you (and only you) via your free Scarf account. Scarf does not store the IP address itself, so no personally identifiable information is collected.","title":"How it works"},{"location":"web-traffic/#getting-started","text":"Head to your Scarf dashboard and locate the Documentation Insights Management section. Give your pixel(s) a name, and optionally attach it to a package you manage on Scarf. Click the \"copy\" button to copy the <img> tag to your clipboard, and then paste the tag into your project's README, docs, and any other web properties where you want to gather insights into who is using your documentation pages.","title":"Getting started"},{"location":"web-traffic/#caveats","text":"","title":"Caveats"},{"location":"web-traffic/#data-precision","text":"View counts from Documentation Insights data should be considered as approximate and not exact. Page loads are a noisy signal, and Scarf's infrastructure that serves your tracking pixel is optimized to always load quickly and never get in the way, rather than having an exact page load count.","title":"Data Precision"},{"location":"web-traffic/#sources","text":"Pixel-based telemetry will work on standard webpages, rendered markdown documentation on package registry sites like npm and PyPi , and anywhere an image can be embedded, with a notable exception being GitHub. When GitHub renders markdown, it rewrites URLs from their original web address to https://camo.githubusercontent.com/ , where GitHub hosts any linked images themselves. This prevents Scarf from providing insights to maintainers, since all that can now be detected at the original web address via the tracking pixel is undifferentiated traffic from GitHub.","title":"Sources"}]}